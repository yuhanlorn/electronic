<?php

namespace App\Filament\Admin\Resources;

use App\Enums\CouponDiscountType;
use App\Filament\Admin\Resources\CouponResource\Pages;
use App\Models\Category;
use App\Models\Coupon;
use App\Models\Product;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Str;

class CouponResource extends Resource
{
    protected static ?string $model = Coupon::class;

    protected static ?string $navigationIcon = 'heroicon-o-receipt-percent';

    protected static ?int $navigationSort = 30;

    protected static ?string $navigationLabel = 'Discount Coupons';

    public static function getNavigationGroup(): ?string
    {
        return 'Promotions & Marketing';
    }

    public static function getNavigationBadge(): ?string
    {
        return Coupon::where('is_activated', true)->count();
    }

    public static function getNavigationLabel(): string
    {
        return trans('filament-ecommerce::messages.coupons.title'); // TODO: Change the autogenerated stub
    }

    public static function getPluralLabel(): ?string
    {
        return trans('filament-ecommerce::messages.coupons.title');
    }

    public static function getLabel(): ?string
    {
        return trans('filament-ecommerce::messages.coupons.single');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('code')
                    ->unique(ignoreRecord: true)
                    ->label(trans('filament-ecommerce::messages.coupons.columns.code'))
                    ->default(Str::random(6))
                    ->required()
                    ->maxLength(255),
                Forms\Components\Select::make('type')
                    ->searchable()
                    ->label(trans('filament-ecommerce::messages.coupons.columns.type'))
                    ->options(CouponDiscountType::options())
                    ->default(CouponDiscountType::DISCOUNT->value),
                Forms\Components\TextInput::make('amount')
                    ->label(trans('filament-ecommerce::messages.coupons.columns.amount'))
                    ->required()
                    ->numeric()
                    ->default(0),
                Forms\Components\DatePicker::make('end_at')
                    ->label(trans('filament-ecommerce::messages.coupons.columns.end_at')),
                Forms\Components\Toggle::make('is_activated')
                    ->columnSpanFull()
                    ->label(trans('filament-ecommerce::messages.coupons.columns.is_activated')),
                Forms\Components\Toggle::make('is_limited')
                    ->columnSpanFull()
                    ->default(false)
                    ->label(trans('filament-ecommerce::messages.coupons.columns.is_limited'))
                    ->live(),
                Forms\Components\Repeater::make('apply_to')
                    ->columnSpanFull()
                    ->hidden(fn (Forms\Get $get) => ! $get('is_limited'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.apply_to'))
                    ->schema([
                        Forms\Components\Select::make('model_type')
                            ->label(trans('filament-ecommerce::messages.coupons.columns.type'))
                            ->searchable()
                            ->options([
                                Product::class => trans('filament-ecommerce::messages.coupons.columns.product'),
                                Category::class => trans('filament-ecommerce::messages.coupons.columns.category'),
                            ])
                            ->live(),
                        Forms\Components\Select::make('model_id')
                            ->hidden(fn (Forms\Get $get) => $get('model_type') !== Category::class)
                            ->label(trans('filament-ecommerce::messages.coupons.columns.category'))
                            ->searchable()
                            ->options(Category::query()->where('for', 'product')->where('type', 'category')->pluck('name', 'id')->toArray()),
                        Forms\Components\Select::make('model_id')
                            ->hidden(fn (Forms\Get $get) => $get('model_type') !== Product::class)
                            ->label(trans('filament-ecommerce::messages.coupons.columns.product'))
                            ->searchable()
                            ->options(Product::query()->pluck('name', 'id')->toArray()),
                    ]),
                Forms\Components\Repeater::make('except')
                    ->columnSpanFull()
                    ->hidden(fn (Forms\Get $get) => ! $get('is_limited'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.except'))
                    ->schema([
                        Forms\Components\Select::make('model_type')
                            ->label(trans('filament-ecommerce::messages.coupons.columns.type'))
                            ->searchable()
                            ->options([
                                Product::class => trans('filament-ecommerce::messages.coupons.columns.product'),
                                Category::class => trans('filament-ecommerce::messages.coupons.columns.category'),
                            ])
                            ->live(),
                        Forms\Components\Select::make('model_id')
                            ->hidden(fn (Forms\Get $get) => $get('model_type') !== Category::class)
                            ->label(trans('filament-ecommerce::messages.coupons.columns.category'))
                            ->searchable()
                            ->options(Category::query()->where('for', 'product')->where('type', 'category')->pluck('name', 'id')->toArray()),
                        Forms\Components\Select::make('model_id')
                            ->hidden(fn (Forms\Get $get) => $get('model_type') !== Product::class)
                            ->label(trans('filament-ecommerce::messages.coupons.columns.product'))
                            ->searchable()
                            ->options(Product::query()->pluck('name', 'id')->toArray()),
                    ]),
                Forms\Components\TextInput::make('use_limit')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_limited'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.use_limit'))
                    ->numeric()
                    ->default(0),
                Forms\Components\TextInput::make('use_limit_by_user')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_limited'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.use_limit_by_user'))
                    ->numeric()
                    ->default(0),
                Forms\Components\TextInput::make('order_total_limit')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_limited'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.order_total_limit'))
                    ->numeric()
                    ->default(0),

                Forms\Components\Toggle::make('is_marketing')
                    ->columnSpanFull()
                    ->live()
                    ->label(trans('filament-ecommerce::messages.coupons.columns.is_marketing')),
                Forms\Components\TextInput::make('marketer_name')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_marketing'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.marketer_name'))
                    ->maxLength(255),
                Forms\Components\TextInput::make('marketer_type')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_marketing'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.marketer_type'))
                    ->maxLength(255),
                Forms\Components\TextInput::make('marketer_amount')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_marketing'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.marketer_amount'))
                    ->numeric(),
                Forms\Components\TextInput::make('marketer_amount_max')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_marketing'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.marketer_amount_max'))
                    ->numeric(),
                Forms\Components\Toggle::make('marketer_show_amount_max')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_marketing'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.marketer_show_amount_max')),
                Forms\Components\Toggle::make('marketer_hide_total_sales')
                    ->hidden(fn (Forms\Get $get) => ! $get('is_marketing'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.marketer_hide_total_sales')),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('code')
                    ->copyable()
                    ->icon('heroicon-o-clipboard')
                    ->badge()
                    ->tooltip(trans('filament-ecommerce::messages.coupons.columns.copy'))
                    ->label(trans('filament-ecommerce::messages.coupons.columns.code'))
                    ->searchable(),
                Tables\Columns\TextColumn::make('type')
                    ->badge()
                    ->icon(fn (Coupon $record) => $record->type->icon())
                    ->color(fn (Coupon $record) => $record->type->color())
                    ->label(trans('filament-ecommerce::messages.coupons.columns.type'))
                    ->state(fn (Coupon $record) => $record->type->label())
                    ->searchable(),
                Tables\Columns\TextColumn::make('amount')
                    ->label(trans('filament-ecommerce::messages.coupons.columns.amount'))
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('end_at')
                    ->label(trans('filament-ecommerce::messages.coupons.columns.end_at'))
                    ->date()
                    ->sortable(),
                Tables\Columns\IconColumn::make('is_activated')
                    ->label(trans('filament-ecommerce::messages.coupons.columns.is_activated'))
                    ->boolean(),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('type')
                    ->label(trans('filament-ecommerce::messages.coupons.filters.type'))
                    ->searchable()
                    ->options(CouponDiscountType::options()),
                Tables\Filters\TernaryFilter::make('is_activated')
                    ->label(trans('filament-ecommerce::messages.coupons.filters.is_activated')),
                Tables\Filters\TernaryFilter::make('is_limited')
                    ->label(trans('filament-ecommerce::messages.coupons.filters.is_limited')),
                Tables\Filters\TernaryFilter::make('is_marketing')
                    ->label(trans('filament-ecommerce::messages.coupons.filters.is_marketing')),
                Tables\Filters\Filter::make('end_at')
                    ->label(trans('filament-ecommerce::messages.coupons.filters.end_at'))
                    ->form([
                        Forms\Components\DatePicker::make('end_at'),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['end_at'],
                                fn (Builder $query, $date): Builder => $query->whereDate('end_at', '>=', $date),
                            );
                    }),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [

        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCoupons::route('/'),
        ];
    }
}
