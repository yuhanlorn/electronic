<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Export\ExportOrders;
use App\Models\Order;
use App\Models\OrderLog;
use App\Models\Product;
use App\Models\Type;
use App\Models\User;
use Carbon\Carbon;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\ExportAction;
use Filament\Tables\Table;

class OrderResource extends Resource
{
    protected static ?string $model = Order::class;

    protected static ?string $navigationIcon = 'heroicon-o-shopping-cart';

    protected static ?int $navigationSort = 20;

    public static function getNavigationGroup(): ?string
    {
        return 'Sales & Orders';
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();
    }

    public static function getNavigationBadgeColor(): ?string
    {
        $pendingOrders = static::getModel()::where('status', 'pending')->count();

        return $pendingOrders > 0 ? 'warning' : 'success';
    }

    public static function getNavigationLabel(): string
    {
        return trans('filament-ecommerce::messages.orders.title'); // TODO: Change the autogenerated stub
    }

    public static function getPluralLabel(): ?string
    {
        return trans('filament-ecommerce::messages.orders.title');
    }

    public static function getLabel(): ?string
    {
        return trans('filament-ecommerce::messages.orders.single'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        $types = Type::query()
            ->where('for', 'orders')
            ->where('type', 'status');

        return $form
            ->schema([
                Forms\Components\TextInput::make('uuid')
                    ->disabled(fn (Order $order) => $order->exists)
                    ->label(trans('filament-ecommerce::messages.orders.columns.uuid'))
                    ->default(fn () => setting('ordering_stating_code').'-'.\Illuminate\Support\Str::random(8))
                    ->required()
                    ->columnSpanFull()
                    ->maxLength(255),

                Forms\Components\Grid::make([
                    'sm' => 1,
                    'lg' => 12,
                ])->schema([
                    Forms\Components\Section::make(trans('filament-ecommerce::messages.orders.sections.company'))
                        ->schema([
                            Forms\Components\Select::make('status')
                                ->label(trans('filament-ecommerce::messages.orders.columns.status'))
                                ->searchable()
                                ->preload()
                                ->options((clone $types)->pluck('name', 'key')->toArray())
                                ->required()
                                ->default('pending'),
                            //                        Forms\Components\Select::make('payment_method')
                            //                            ->searchable()
                            //                            ->preload()
                            //                            ->options(Type::query()->where('for', 'orders')->where('type', 'payment_methods')->pluck('name', 'key')->toArray())
                            //                            ->default('cash')
                            //                            ->label(trans('filament-ecommerce::messages.orders.columns.payment_method')),
                        ])->columns(2)->collapsible()->collapsed(fn ($record) => $record),
                    Forms\Components\Section::make(trans('filament-ecommerce::messages.orders.sections.account'))
                        ->schema([
                            Forms\Components\Select::make('user_id')
                                ->searchable()
                                ->options(\App\Models\User::query()->where('is_active', 1)->pluck('name', 'id')->toArray())
                                ->lazy()
                                ->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                    $account = \App\Models\User::find($get('account_id'));
                                    if ($account) {
                                        $set('name', $account->name);
                                        $set('phone', $account->phone);
                                    }
                                })
                                ->label(trans('filament-ecommerce::messages.orders.columns.account_id'))
                                ->required(),
                            Forms\Components\TextInput::make('name')
                                ->label(trans('filament-ecommerce::messages.orders.columns.name'))
                                ->maxLength(255),
                            Forms\Components\TextInput::make('phone')
                                ->label(trans('filament-ecommerce::messages.orders.columns.phone'))
                                ->maxLength(255),
                            Forms\Components\Select::make('source')
                                ->searchable()
                                ->options(Type::query()->where('for', 'orders')->where('type', 'source')->pluck('name', 'key')->toArray())
                                ->label(trans('filament-ecommerce::messages.orders.columns.source'))
                                ->required()
                                ->default('system'),
                        ])->columnSpan(6)->collapsible()->collapsed(fn ($record) => $record),
                    Forms\Components\Section::make(trans('filament-ecommerce::messages.orders.sections.location'))
                        ->schema([
                            Forms\Components\TextInput::make('flat')
                                ->label(trans('filament-ecommerce::messages.orders.columns.flat'))
                                ->columnSpanFull()
                                ->maxLength(255),
                            Forms\Components\Textarea::make('address')
                                ->label(trans('filament-ecommerce::messages.orders.columns.address'))
                                ->columnSpanFull(),
                        ])->columns(2)->columnSpan(6)->collapsible()->collapsed(fn ($record) => $record),
                ]),
                Forms\Components\Section::make(trans('filament-ecommerce::messages.orders.sections.items'))
                    ->schema([
                        Forms\Components\Repeater::make('items')
                            ->hiddenLabel()
                            ->label(trans('filament-ecommerce::messages.orders.columns.items'))
                            ->schema([
                                Forms\Components\Select::make('product_id')
                                    ->searchable()
                                    ->options(Product::query()->where('is_activated', 1)->pluck('name', 'id')->toArray())
                                    ->live()
                                    ->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                        $product = Product::find($get('product_id'));
                                        if ($product) {
                                            $discount = 0;
                                            if ($product->discount_to && Carbon::parse($product->discount_to)->isFuture()) {
                                                $discount = $product->discount;
                                            }

                                            $set('price', $product->price);
                                            $set('discount', $discount);
                                            $set('vat', $product->vat);
                                            $set('total', (($product->price + $product->vat) - $discount) * $get('qty'));
                                        }
                                    })
                                    ->label(trans('filament-ecommerce::messages.orders.columns.product_id'))
                                    ->columnSpan(3),
                                Forms\Components\TextInput::make('qty')
                                    ->live()
                                    ->label(trans('filament-ecommerce::messages.orders.columns.qty'))
                                    ->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                        $product = Product::find($get('product_id'));
                                        if ($product) {
                                            $discount = 0;
                                            if ($product->discount_to && Carbon::parse($product->discount_to)->isFuture()) {
                                                $discount = $product->discount;
                                            }

                                            $set('price', $product->price);
                                            $set('discount', $discount);
                                            $set('vat', $product->vat);
                                            $set('total', (($product->price + $product->vat) - $discount) * $get('qty'));
                                        }
                                    })
                                    ->default(1)
                                    ->numeric(),
                                Forms\Components\TextInput::make('price')
                                    ->disabled()
                                    ->label(trans('filament-ecommerce::messages.orders.columns.price'))
                                    ->columnSpan(2)
                                    ->default(0)
                                    ->numeric(),
                                Forms\Components\TextInput::make('discount')
                                    ->disabled()
                                    ->label(trans('filament-ecommerce::messages.orders.columns.discount'))
                                    ->columnSpan(2)
                                    ->default(0)
                                    ->numeric(),
                                Forms\Components\TextInput::make('vat')
                                    ->disabled()
                                    ->label(trans('filament-ecommerce::messages.orders.columns.vat'))
                                    ->columnSpan(2)
                                    ->default(0)
                                    ->numeric(),
                                Forms\Components\TextInput::make('total')
                                    ->disabled()
                                    ->label(trans('filament-ecommerce::messages.orders.columns.total'))
                                    ->columnSpan(2)
                                    ->default(0)
                                    ->numeric(),
                            ])
                            ->lazy()
                            ->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                $items = $get('items');
                                $total = 0;
                                $discount = 0;
                                $vat = 0;
                                foreach ($items as $orderItem) {
                                    $product = Product::find($orderItem['product_id']);
                                    if ($product) {
                                        $getDiscount = 0;
                                        if ($product->discount_to && Carbon::parse($product->discount_to)->isFuture()) {
                                            $getDiscount = $product->discount;
                                        }

                                        $total += ((($product->price + $product->vat) - $getDiscount) * $orderItem['qty']);
                                        $discount += ($getDiscount * $orderItem['qty']);
                                        $vat += ($product->vat * $orderItem['qty']);
                                    }

                                }
                                $set('total', $total);
                                $set('discount', $discount);
                                $set('vat', $vat);
                            })
                            ->columns(12),
                    ])->collapsible()->collapsed(fn ($record) => $record),
                Forms\Components\Section::make(trans('filament-ecommerce::messages.orders.sections.totals'))
                    ->schema([
                        //                    Forms\Components\Hidden::make('coupon_id'),
                        //                    Forms\Components\TextInput::make('coupon')
                        //                        ->label(trans('filament-ecommerce::messages.orders.columns.coupon'))
                        //                        ->hidden(fn($record) => ($record || !filament('filament-ecommerce')::$useCoupon))
                        //                        ->suffixAction(
                        //                            Forms\Components\Actions\Action::make('apply')
                        //                                ->tooltip(trans('filament-ecommerce::messages.orders.actions.apply'))
                        //                                ->icon('heroicon-s-check')
                        //                                ->action(function (Forms\Get $get,Forms\Set $set){
                        //                                    $coupon = Coupon::query()->where('code', $get('coupon'))->first();
                        //                                    if($coupon){
                        //                                        $items = $get('items');
                        //                                        $total = 0;
                        //                                        $vat = 0;
                        //                                        $productIds = [];
                        //                                        $discount = 0;
                        //                                        foreach ($items as $orderItem){
                        //                                            $productIds[] = $orderItem['product_id'];
                        //                                            $product = Product::find($orderItem['product_id']);
                        //                                            if($product){
                        //                                                $getDiscount= 0;
                        //                                                if($product->discount_to && Carbon::parse($product->discount_to)->isFuture()){
                        //                                                    $getDiscount = $product->discount;
                        //                                                }
                        //
                        //                                                $discount+=$getDiscount;
                        //                                                $vat+=$product->vat;
                        //                                                $total += ((($product->price+$product->vat)-$getDiscount)*$orderItem['qty']);
                        //                                            }
                        //                                        }
                        //
                        //                                        $getCouponDiscount = FilamentEcommerce::coupon()
                        //                                            ->products($productIds)
                        //                                            ->discount(code: $get('coupon'), total: $total);
                        //
                        //                                        if($getCouponDiscount){
                        //                                            $discount+=$getCouponDiscount;
                        //
                        //                                            $set('discount', $discount);
                        //                                            $set('total', ($total+$vat)-$discount);
                        //                                            $set('coupon_id', $coupon->id);
                        //
                        //                                            Notification::make()
                        //                                                ->title(trans('filament-ecommerce::messages.orders.actions.coupon.success'))
                        //                                                ->success()
                        //                                                ->send();
                        //                                        }
                        //                                        else {
                        //                                            Notification::make()
                        //                                                ->title(trans('filament-ecommerce::messages.orders.actions.coupon.not_valid'))
                        //                                                ->danger()
                        //                                                ->send();
                        //                                        }
                        //                                    }
                        //                                    else {
                        //                                        Notification::make()
                        //                                            ->title(trans('filament-ecommerce::messages.orders.actions.coupon.not_found'))
                        //                                            ->danger()
                        //                                            ->send();
                        //                                    }
                        //
                        //                                })
                        //                        ),
                        Forms\Components\TextInput::make('shipping')
                            ->lazy()
                            ->afterStateUpdated(function (Forms\Get $get, Forms\Set $set) {
                                $items = $get('items');
                                $total = 0;
                                foreach ($items as $orderItem) {
                                    $product = Product::find($orderItem['product_id']);
                                    if ($product) {
                                        $getDiscount = 0;
                                        if ($product->discount_to && Carbon::parse($product->discount_to)->isFuture()) {
                                            $getDiscount = $product->discount;
                                        }

                                        $total += ((($product->price + $product->vat) - $getDiscount) * $orderItem['qty']);
                                    }
                                }

                                $set('total', $total + (int) $get('shipping'));
                            })
                            ->label(trans('filament-ecommerce::messages.orders.columns.shipping'))
                            ->numeric()
                            ->default(0),
                        Forms\Components\TextInput::make('vat')
                            ->disabled()
                            ->label(trans('filament-ecommerce::messages.orders.columns.vat'))
                            ->numeric()
                            ->default(0),
                        Forms\Components\TextInput::make('discount')
                            ->disabled()
                            ->label(trans('filament-ecommerce::messages.orders.columns.discount'))
                            ->numeric()
                            ->default(0),
                        Forms\Components\TextInput::make('total')
                            ->disabled()
                            ->label(trans('filament-ecommerce::messages.orders.columns.total'))
                            ->numeric()
                            ->default(0),

                        Forms\Components\Toggle::make('has_returns')
                            ->label(trans('filament-ecommerce::messages.orders.columns.has_returns'))
                            ->live(),

                        Forms\Components\TextInput::make('return_total')
                            ->label(trans('filament-ecommerce::messages.orders.columns.return_total'))
                            ->hidden(fn (Forms\Get $get) => ! ($get('has_returns')))
                            ->numeric()
                            ->default(0),

                        Forms\Components\TextInput::make('reason')
                            ->label(trans('filament-ecommerce::messages.orders.columns.reason'))
                            ->hidden(fn (Forms\Get $get) => ! ($get('has_returns')))
                            ->maxLength(255),
                        Forms\Components\Textarea::make('notes')
                            ->label(trans('filament-ecommerce::messages.orders.columns.notes'))
                            ->columnSpanFull(),
                    ])->collapsible()->collapsed(fn ($record) => $record),
            ]);
    }

    public static function table(Table $table): Table
    {
        $types = Type::query()
            ->where('for', 'orders')
            ->where('type', 'status');

        return $table
            ->headerActions([
                ExportAction::make()
                    ->hiddenLabel()
                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.export'))
                    ->color('success')
                    ->icon('heroicon-s-document-arrow-down')
                    ->exporter(ExportOrders::class),
                Tables\Actions\Action::make('import')
                    ->hiddenLabel()
                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.import'))
                    ->color('warning')
                    ->form([
                        Forms\Components\Textarea::make('data')
                            ->default("name: \nphone: \naddress: \nsource: \nitems: SKU*QTY,SKU*QTY")
                            ->hint(trans('filament-ecommerce::messages.orders.import.hint'))
                            ->label(trans('filament-ecommerce::messages.orders.import.order_text'))
                            ->autosize()
                            ->required(),
                    ])
                    ->action(function (array $data) {
                        $getMultiOrders = explode('====', $data['data']);
                        if (count($getMultiOrders)) {
                            foreach ($getMultiOrders as $orderItem) {
                                (new self)->convertTextToOrder($orderItem);
                            }
                        } else {
                            (new self)->convertTextToOrder($data['data']);
                        }
                    })
                    ->icon('heroicon-s-document-text'),
            ])
            ->columns([
                Tables\Columns\TextColumn::make('created_at')
                    ->label(trans('filament-ecommerce::messages.orders.columns.created_at'))
                    ->description(fn ($record) => $record->created_at->diffForHumans())
                    ->dateTime()
                    ->sortable()
                    ->toggleable(),
                Tables\Columns\TextColumn::make('uuid')
                    ->label(trans('filament-ecommerce::messages.orders.columns.uuid'))
                    ->description(fn ($record) => $record->type.' by '.$record->user?->name)
                    ->label('UUID')
                    ->sortable()
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('name')
                    ->label(trans('filament-ecommerce::messages.orders.columns.name'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->description(fn ($record) => $record->phone)
                    ->searchable(),
                Tables\Columns\TextColumn::make('phone')
                    ->label(trans('filament-ecommerce::messages.orders.columns.phone'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->searchable(),
                Tables\Columns\TextColumn::make('address')
                    ->label(trans('filament-ecommerce::messages.orders.columns.address'))
                    ->description(fn ($record) => $record->country->name.', '.$record->city->name.', '.$record->area->name.', '.$record->flat)
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('shipper.name')
                    ->label(trans('filament-ecommerce::messages.orders.columns.shipper_id'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable(),
                Tables\Columns\TextColumn::make('branch.name')
                    ->label(trans('filament-ecommerce::messages.orders.columns.branch_id'))
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->sortable(),
                Tables\Columns\TextColumn::make('shipping')
                    ->label(trans('filament-ecommerce::messages.orders.columns.shipping'))
                    ->summarize(Tables\Columns\Summarizers\Sum::make()->money(locale: 'en', currency: setting('site_currency')))
                    ->money(locale: 'en', currency: setting('site_currency'))
                    ->color('warning')
                    ->sortable(),
                Tables\Columns\TextColumn::make('vat')
                    ->label(trans('filament-ecommerce::messages.orders.columns.vat'))
                    ->summarize(Tables\Columns\Summarizers\Sum::make()->money(locale: 'en', currency: setting('site_currency')))
                    ->money(locale: 'en', currency: setting('site_currency'))
                    ->color('warning')
                    ->sortable(),
                Tables\Columns\TextColumn::make('discount')
                    ->label(trans('filament-ecommerce::messages.orders.columns.discount'))
                    ->summarize(Tables\Columns\Summarizers\Sum::make()->money(locale: 'en', currency: setting('site_currency')))
                    ->money(locale: 'en', currency: setting('site_currency'))
                    ->color('danger')
                    ->sortable(),
                Tables\Columns\TextColumn::make('total')
                    ->label(trans('filament-ecommerce::messages.orders.columns.total'))
                    ->summarize(Tables\Columns\Summarizers\Sum::make()->money(locale: 'en', currency: setting('site_currency')))
                    ->money(locale: 'en', currency: setting('site_currency'))
                    ->color('success')
                    ->sortable(),
                Tables\Columns\ToggleColumn::make('is_approved')
                    ->label(trans('filament-ecommerce::messages.orders.columns.is_approved'))
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\ToggleColumn::make('is_closed')
                    ->label(trans('filament-ecommerce::messages.orders.columns.is_closed'))
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label(trans('filament-ecommerce::messages.orders.columns.updated_at'))
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->groups([
                Tables\Grouping\Group::make('status'),
            ])
            ->filtersLayout(Tables\Enums\FiltersLayout::Modal)
            ->filters([
                Tables\Filters\SelectFilter::make('user_id')
                    ->label(trans('filament-ecommerce::messages.orders.filters.user_id'))
                    ->searchable()
                    ->options(User::pluck('name', 'id')->toArray()),

                Tables\Filters\SelectFilter::make('payment_method')
                    ->label(trans('filament-ecommerce::messages.orders.filters.payment_method'))
                    ->searchable()
                    ->options([
                        'cash' => 'Cash',
                        'credit' => 'Credit',
                        'wallet' => 'Wallet',
                    ]),
                Tables\Filters\TernaryFilter::make('is_approved')
                    ->label(trans('filament-ecommerce::messages.orders.filters.is_approved')),
                Tables\Filters\TernaryFilter::make('is_closed')
                    ->label(trans('filament-ecommerce::messages.orders.filters.is_closed')),
            ])
            ->actions([
                Tables\Actions\Action::make('approved')
                    ->hidden(fn ($record) => $record->status !== 'pending')
                    ->requiresConfirmation()
                    ->action(function ($record, array $data) {
                        $record->update(['is_approved' => 1, 'status' => 'prepared']);

                        $orderLog = new OrderLog;
                        $orderLog->user_id = auth()->user()->id;
                        $orderLog->order_id = $record->id;
                        $orderLog->status = $record->status;
                        $orderLog->is_closed = 1;
                        $orderLog->note = 'Order has been Approved by: '.auth()->user()->name.' and Total: '.number_format($record->total, 2);
                        $orderLog->save();

                        Notification::make()
                            ->title('Order Approved Changed')
                            ->body('Order has been Approved')
                            ->success()
                            ->send();
                    })
                    ->label(trans('filament-ecommerce::messages.orders.actions.approved'))
                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.approved'))
                    ->icon('heroicon-s-check-circle')
                    ->color('success')
                    ->iconButton(),
                //                Tables\Actions\Action::make('shipping')
                //                    ->hidden(fn($record) => $record->status === 'prepared' || $record->status === 'pending')
                //                    ->requiresConfirmation()
                //                    ->form([
                //                        Forms\Components\Select::make('shipping_vendor_id')
                //                            ->label(trans('filament-ecommerce::messages.orders.columns.shipping_vendor_id'))
                //                            ->searchable()
                //                            ->live()
                //                            ->options(ShippingVendor::pluck('name', 'id')->toArray())
                //                            ->required(),
                //                        Forms\Components\Select::make('shipper_id')
                //                            ->label(trans('filament-ecommerce::messages.orders.columns.shipper_id'))
                //                            ->searchable()
                //                            ->options(fn(Forms\Get $get)=> Delivery::query()->where('shipping_vendor_id', $get('shipping_vendor_id'))->pluck('name', 'id')->toArray())
                //                            ->required(),
                //                    ])
                //                    ->fillForm(fn($record) => [
                //                        'shipping_vendor_id' => $record->shipping_vendor_id,
                //                        'shipper_id' => $record->shipper_id,
                //                    ])
                //                    ->action(function($record, array $data){
                //                        $shippingPrice = 0;
                //                        $getShippingVendorPrices = ShippingPrice::query()
                //                            ->where('shipping_vendor_id', $data['shipping_vendor_id'])
                //                            ->where('country_id', $record->country_id)
                //                            ->where('city_id', $record->city_id)
                //                            ->where('area_id', $record->area_id)
                //                            ->where('delivery_id', $data['shipper_id'])
                //                            ->orWhereNull('delivery_id')
                //                            ->first();
                //
                //                        if($getShippingVendorPrices){
                //                            $shippingPrice = $getShippingVendorPrices->price;
                //                        }
                //                        else {
                //                            $shippingPrice = ShippingVendor::find($data['shipping_vendor_id'])?->price;
                //                        }
                //
                //                        $record->update([
                //                            'shipping_vendor_id' => $data['shipping_vendor_id'],
                //                            'shipper_id' => $data['shipper_id'],
                //                            'status' => 'shipped',
                //                            'shipping' => $shippingPrice,
                //                            'total' => $record->ordersItems()->sum('total') + $shippingPrice,
                //                        ]);
                //
                //                        $orderLog = new OrderLog();
                //                        $orderLog->user_id = auth()->user()->id;
                //                        $orderLog->order_id = $record->id;
                //                        $orderLog->status = $record->status;
                //                        $orderLog->is_closed = 1;
                //                        $orderLog->note = 'Order Shipper has been selected: '. $record->delivery?->name . ' by: '.auth()->user()->name. ' and Total: '.number_format($record->total, 2);
                //                        $orderLog->save();
                //
                //                        Notification::make()
                //                            ->title('Order Shipper Changed')
                //                            ->body('Order Shipper has been selected: ' . $record->delivery?->name)
                //                            ->success()
                //                            ->send();
                //                    })
                //                    ->label(trans('filament-ecommerce::messages.orders.actions.shipping'))
                //                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.shipping'))
                //                    ->icon('heroicon-s-truck')
                //                    ->color('danger')
                //                    ->iconButton(),
                Tables\Actions\Action::make('status')
                    ->form([
                        Forms\Components\Select::make('status')
                            ->label(trans('filament-ecommerce::messages.orders.columns.status'))
                            ->searchable()
                            ->options((clone $types)->pluck('name', 'key')->toArray())
                            ->required()
                            ->default('pending'),
                    ])
                    ->fillForm(fn ($record) => [
                        'status' => $record->status,
                    ])
                    ->action(function ($record, array $data) {
                        $record->update(['status' => $data['status']]);

                        $orderLog = new OrderLog;
                        $orderLog->user_id = auth()->user()->id;
                        $orderLog->order_id = $record->id;
                        $orderLog->status = $record->status;
                        $orderLog->is_closed = 1;
                        $orderLog->note = 'Order update by '.auth()->user()->name.' and Total: '.number_format($record->total, 2);
                        $orderLog->save();

                        Notification::make()
                            ->title('Order Status Changed')
                            ->body('Order status has been changed to '.$data['status'])
                            ->success()
                            ->send();
                    })
                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.status'))
                    ->label(trans('filament-ecommerce::messages.orders.actions.status'))
                    ->icon('heroicon-s-adjustments-horizontal')
                    ->color('warning')
                    ->iconButton(),
                Tables\Actions\Action::make('print')
                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.print'))
                    ->icon('heroicon-s-printer')
                    ->openUrlInNewTab()
                    ->url(fn ($record) => route('order.print', $record->id))
                    ->iconButton(),
                Tables\Actions\ViewAction::make()
                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.show'))
                    ->iconButton(),
                Tables\Actions\EditAction::make()
                    ->tooltip(trans('filament-ecommerce::messages.orders.actions.edit'))
                    ->iconButton(),
            ])
            ->defaultSort('created_at', 'desc')
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    protected function convertTextToOrder(string $text)
    {
        $getTextArray = explode("\n", $text);

        $name = null;
        $phone = null;
        $address = null;
        $source = null;
        $items = null;
        foreach ($getTextArray as $textItem) {
            if (str($textItem)->contains('name:')) {
                $name = str($textItem)->replace('name:', '')->replaceFirst(' ', '')->toString();
            }
            if (str($textItem)->contains('phone:')) {
                $phone = str($textItem)->replace('phone:', '')->replaceFirst(' ', '')->toString();
            }
            if (str($textItem)->contains('address:')) {
                $address = str($textItem)->replace('address:', '')->replaceFirst(' ', '')->toString();
            }
            if (str($textItem)->contains('source:')) {
                $source = str($textItem)->replace('source:', '')->replaceFirst(' ', '')->toString();
            }
            if (str($textItem)->contains('items:')) {
                $items = str($textItem)->replace('items:', '')->replaceFirst(' ', '')->toString();
            }
        }
        $account = config('filament-accounts.model')::query()->where('phone', $phone)->where('username', $phone)->first();
        if (! $account) {
            $account = config('filament-accounts.model')::query()->create([
                'name' => $name,
                'phone' => $phone,
                'loginBy' => 'phone',
                'username' => $phone,
                'address' => $address,
            ]);
        } else {
            $account->update([
                'name' => $name,
                'phone' => $phone,
                'address' => $address,
            ]);
        }

        $order = Order::query()->create([
            'uuid' => setting('ordering_stating_code').'-'.\Illuminate\Support\Str::random(8),
            'company_id' => setting('ordering_company_id'),
            'branch_id' => setting('ordering_direct_branch'),
            'user_id' => auth()->user()->id,
            'account_id' => $account->id,
            'name' => $name,
            'phone' => $phone,
            'address' => $address,
            'source' => $source,
            'status' => 'pending',
            'payment_method' => 'cash',
            'total' => 0,
            'vat' => 0,
            'discount' => 0,
            'shipping' => 0,
        ]);

        $total = 0;
        $vat = 0;
        $discount = 0;
        $shipping = setting('ordering_active_shipping_fees') ? (int) setting('ordering_shipping_fees') : 0;

        if ($order) {
            $itemsArray = explode(',', $items);
            foreach ($itemsArray as $itemText) {
                $exploadItemText = explode('*', $itemText);
                $product = Product::query()->where('sku', 'LIKE', '%'.str($exploadItemText[0])->remove(' ')->toString().'%')->first();
                $qty = $exploadItemText[1];
                $discount = 0;

                if ($product) {
                    if ($product->discount_to && Carbon::parse($product->discount_to)->isFuture()) {
                        $discount = $product->discount;
                    }
                    $order->ordersItems()->create([
                        'product_id' => $product->id,
                        'qty' => $qty,
                        'price' => $product->price,
                        'discount' => $discount,
                        'vat' => $product->vat,
                        'total' => (($product->price + $product->vat) - $discount) * $qty,
                    ]);

                    $discount += $discount;
                    $vat += $product->vat;
                    $total += (($product->price + $product->vat) - $discount) * $qty;
                }
            }

            $order->discount = $discount;
            $order->vat = $vat;
            $order->total = $total + $shipping;
            $order->shipping = $shipping;
            $order->save();

            $orderLog = new OrderLog;
            $orderLog->user_id = auth()->user()->id;
            $orderLog->order_id = $order->id;
            $orderLog->status = $order->status;
            $orderLog->is_closed = 1;
            $orderLog->note = 'Order created by '.auth()->user()->name.' and Total: '.number_format($order->total, 2).' and imported text '.$text;
            $orderLog->save();
        }
    }

    public static function getRelations(): array
    {
        return [
            \App\Filament\Admin\Resources\OrderResource\RelationManagers\OrderLog::make(),
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => \App\Filament\Admin\Resources\OrderResource\Pages\ListOrders::route('/'),
            'create' => \App\Filament\Admin\Resources\OrderResource\Pages\CreateOrder::route('/create'),
            'edit' => \App\Filament\Admin\Resources\OrderResource\Pages\EditOrder::route('/{record}/edit'),
            'view' => \App\Filament\Admin\Resources\OrderResource\Pages\ViewOrder::route('/{record}/show'),
        ];
    }
}
