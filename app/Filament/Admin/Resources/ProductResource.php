<?php

namespace App\Filament\Admin\Resources;

use App\Models\Category;
use App\Models\Product;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Concerns\Translatable;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Support\Facades\Auth as FacadesAuth;
use Illuminate\Support\Str;

class ProductResource extends Resource
{
    use Translatable;

    protected static ?string $model = Product::class; // TODO: Change the autogenerated stub

    protected static ?string $navigationIcon = 'heroicon-o-shopping-bag';

    protected static ?int $navigationSort = 10;

    public static function getNavigationGroup(): ?string
    {
        return 'Product Management';
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();
    }

    public static function getPluralLabel(): ?string
    {
        return trans('filament-ecommerce::messages.product.title');
    }

    public static function getNavigationLabel(): string
    {
        return trans('filament-ecommerce::messages.product.title'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return trans('filament-ecommerce::messages.product.single'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Hidden::make('type')
                    ->default('product')
                    ->required(),
                Forms\Components\TextInput::make('name')
                    ->label(trans('filament-ecommerce::messages.product.columns.name'))
                    ->lazy()
                    ->afterStateUpdated(fn (Forms\Get $get, Forms\Set $set) => $set('slug', \Illuminate\Support\Str::slug($get('name'))))
                    ->required(),
                Forms\Components\TextInput::make('slug')
                    ->label(trans('filament-ecommerce::messages.product.columns.slug'))
                    ->required()
                    ->maxLength(255),
                Forms\Components\TextInput::make('price')
                    ->label(trans('filament-ecommerce::messages.product.columns.price'))
                    ->required()
                    ->numeric()
                    ->prefix('$'),
                Forms\Components\TextInput::make('discount')
                    ->label(trans('filament-ecommerce::messages.product.columns.discount'))
                    ->numeric()
                    ->live()
                    ->prefix('%')
                    ->default(0),
                Forms\Components\DateTimePicker::make('discount_to')
                    ->rule('after:now')
                    ->hidden(fn (Forms\Get $get) => ! $get('discount'))
                    ->label(trans('filament-ecommerce::messages.product.columns.discount_to')),
                Forms\Components\SpatieMediaLibraryFileUpload::make('feature_image')
                    ->columnSpanFull()
                    ->collection('feature_image')
                    ->responsiveImages()
                    ->imageEditor()
                    ->label(trans('filament-ecommerce::messages.product.columns.feature_image')),
                Forms\Components\SpatieMediaLibraryFileUpload::make('gallery')
                    ->columnSpanFull()
                    ->collection('gallery')
                    ->multiple()
                    ->imageEditor()
                    ->reorderable()
                    ->label(trans('filament-ecommerce::messages.product.columns.gallery')),
                Forms\Components\Select::make('category_id')
//                                    ->columnSpanFull()
                    ->searchable()
                    ->options(Category::query()
                        ->where('for', 'product')
                        ->where('type', 'category')
                        ->pluck('name', 'id')
                        ->toArray()
                    )
                    ->label(trans('filament-ecommerce::messages.product.columns.category_id')),
                Forms\Components\RichEditor::make('description')
                    ->columnSpanFull()
                    ->label(trans('filament-ecommerce::messages.product.columns.description')),
                Forms\Components\Toggle::make('is_activated')
                    ->columnSpanFull()
                    ->label(trans('filament-ecommerce::messages.product.columns.is_activated')),
                Forms\Components\Toggle::make('is_trend')
                    ->columnSpanFull()
                    ->label(trans('filament-ecommerce::messages.product.columns.is_trend')),
                Forms\Components\Toggle::make('is_in_stock')
                    ->label(trans('filament-ecommerce::messages.product.columns.is_in_stock'))
                    ->default(true),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\ImageColumn::make('feature_image')
                    ->label(trans('filament-ecommerce::messages.product.columns.feature_image'))
                    ->toggleable(isToggledHiddenByDefault: false),
                Tables\Columns\TextColumn::make('name')
                    ->description(fn (Product $product) => Str::limit($product->about, 50))
                    ->label(trans('filament-ecommerce::messages.product.columns.name'))
                    ->sortable()
                    ->searchable(),
                
                Tables\Columns\TextColumn::make('category.name')
                    ->label(trans('filament-ecommerce::messages.product.columns.category_id'))
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: false)
                    ->searchable(),
                Tables\Columns\TextColumn::make('price')
                    ->state(fn (Product $product) => ($product->price + $product->vat) - $product->discount)
                    ->description(fn (Product $product) => '(Price:'.number_format($product->price, 2).'+VAT:'.number_format($product->vat).')-Discount:'.number_format($product->discount))
                    ->label(trans('filament-ecommerce::messages.product.columns.price'))
                    ->money(locale: 'en', currency: setting('site_currency'))
                    ->sortable(),
                Tables\Columns\ToggleColumn::make('is_activated')
                    ->disabled(fn (Product $product) => ! FacadesAuth::user()->can('update', $product))
                    ->label(trans('filament-ecommerce::messages.product.columns.is_activated')),
                Tables\Columns\ToggleColumn::make('is_trend')
                    ->disabled(fn (Product $product) => ! FacadesAuth::user()->can('update', $product))
                    ->label(trans('filament-ecommerce::messages.product.columns.is_trend')),
                Tables\Columns\ToggleColumn::make('is_in_stock')
                    ->toggleable(isToggledHiddenByDefault: true)
                    ->disabled(fn (Product $product) => ! FacadesAuth::user()->can('update', $product))
                    ->label(trans('filament-ecommerce::messages.product.columns.is_in_stock')),
                
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: false),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('category_id')
                    ->label(trans('filament-ecommerce::messages.product.filters.category_id'))
                    ->searchable()
                    ->options(Category::query()
                        ->where('for', 'product')
                        ->where('type', 'category')
                        ->pluck('name', 'id')
                        ->toArray()
                    ),
                //                Tables\Filters\SelectFilter::make('categories')
                //                    ->label(trans('filament-ecommerce::messages.product.filters.categories'))
                //                    ->searchable()
                //                    ->multiple()
                //                    ->relationship('categories', 'name')
                //                    ->options(Category::query()
                //                        ->where('for', 'product')
                //                        ->where('type', 'category')
                //                        ->pluck('name', 'id')
                //                        ->toArray()
                //                    ),
                //                Tables\Filters\SelectFilter::make('type')
                //                    ->label(trans('filament-ecommerce::messages.product.filters.type'))
                //                    ->searchable()
                //                    ->options([
                //                        'product' => trans('filament-ecommerce::messages.product.columns.product'),
                //                        'digital' => trans('filament-ecommerce::messages.product.columns.digital'),
                //                        'service' => trans('filament-ecommerce::messages.product.columns.service'),
                //                    ]),
                Tables\Filters\TernaryFilter::make('is_activated')
                    ->label(trans('filament-ecommerce::messages.product.filters.is_activated')),
                Tables\Filters\TernaryFilter::make('is_trend')
                    ->label(trans('filament-ecommerce::messages.product.filters.is_trend')),
                Tables\Filters\TernaryFilter::make('is_shipped')
                    ->label(trans('filament-ecommerce::messages.product.filters.is_shipped')),
                Tables\Filters\TernaryFilter::make('is_in_stock')
                    ->label(trans('filament-ecommerce::messages.product.filters.is_in_stock')),

            ])
            ->filtersLayout(Tables\Enums\FiltersLayout::Modal)
            ->groups([
                Tables\Grouping\Group::make('category.name'),
            ])
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->icon('heroicon-m-eye')
                    ->color('info'),

                Tables\Actions\EditAction::make()
                    ->icon('heroicon-m-pencil-square')
                    ->color('primary'),

                Tables\Actions\DeleteAction::make()
                    ->icon('heroicon-m-trash')
                    ->color('danger'),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //            \App\Filament\Admin\Resources\ProductResource\RelationManagers\ProductReviewManager::make(),
            //            \App\Filament\Admin\Resources\ProductResource\RelationManagers\CodesManager::make()
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => \App\Filament\Admin\Resources\ProductResource\Pages\ListProducts::route('/'),
            'create' => \App\Filament\Admin\Resources\ProductResource\Pages\CreateProduct::route('/create'),
            'edit' => \App\Filament\Admin\Resources\ProductResource\Pages\EditProduct::route('/{record}/edit'),
        ];
    }
}
